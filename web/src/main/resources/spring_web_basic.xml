<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <bean class="c.okami.core.support.spring.SpringApplicationContext"/>

    <!--<context:property-placeholder location="classpath:web.properties"/>-->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:web.properties</value>
        </property>
        <property name="fileEncoding" value="utf-8" />
    </bean>

    <context:annotation-config/>

    <!-- 通过exclude-filter 把所有 @Controller注解的表现层控制器组件排除-->
    <context:component-scan base-package="c.okami.web" />
    <context:component-scan base-package="c.okami.web.controller">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- redis -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>

    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}" p:poolConfig-ref="poolConfig"/>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
    </bean>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${db.url}"/>
        <property name="driverClassName" value="${db.driver}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.passwd}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10"/>
        <property name="minIdle" value="100"/>
        <property name="maxActive" value="500"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
        <property name="removeAbandoned" value="true"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="true"/>
        <!-- 关闭abanded连接时输出错误日志 -->
    </bean>
    <!--事务控制-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--编程事务控制-->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">${show.sql}</prop>
                <prop key="hibernate.connection.useUnicode">true</prop>
                <prop key="hibernate.connection.characterEncoding">utf-8</prop>
                <prop key="hibernate.connection.autocommit ">false</prop>
                <!--用Hibernate来维护实体类的持久化-->
                <!--<prop key="hibernate.hbm2ddl.auto">create</prop>-->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!--<prop key="hibernate.cache.use_query_cache">true</prop>-->
                <!--<prop key="hibernate.cache.provider_class"></prop>-->
            </props>
        </property>
        <property name="annotatedPackages">
            <array>
                <value>c.okami.core.domain</value>
            </array>
        </property>
        <property name="packagesToScan">
            <array>
                <value>c.okami.core.domain</value>
            </array>
        </property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--邮件收发 -->
    <!--<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">-->
    <!--<property name="host" value="${email.smtp}"/>-->
    <!--<property name="password" value="${email.pwd}"/>-->
    <!--<property name="username" value="${email.user}"/>-->
    <!--&lt;!&ndash;<property name="port" value="25"/>&ndash;&gt;-->
    <!--<property name="javaMailProperties">-->
    <!--<props>-->
    <!--<prop key="mail.smtp.auth">${email.smtp.auth}</prop>-->
    <!--&lt;!&ndash;<prop key="mail.smtp.timeout">${email.smtp.timeout}</prop>&ndash;&gt;-->
    <!--</props>-->
    <!--</property>-->
    <!--</bean>-->

</beans>